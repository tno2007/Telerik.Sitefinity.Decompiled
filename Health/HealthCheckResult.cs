// Decompiled with JetBrains decompiler
// Type: Telerik.Sitefinity.Health.HealthCheckResult
// Assembly: Telerik.Sitefinity, Version=13.3.7600.0, Culture=neutral, PublicKeyToken=b28c218413bdf563
// MVID: 39C4B52A-B559-4D9C-97D9-CCCF73C3738E
// Assembly location: C:\Programs\Sitefinity\ProjectManager_13_3_7600\_EmptyProject\bin\Telerik.Sitefinity.dll

using Newtonsoft.Json;
using System;
using System.Collections.Generic;

namespace Telerik.Sitefinity.Health
{
  /// <summary>Defines the health check result data.</summary>
  public class HealthCheckResult
  {
    private string operation;
    private bool passed;
    private string message;

    /// <summary>
    /// Initializes a new instance of the <see cref="T:Telerik.Sitefinity.Health.HealthCheckResult" /> class.
    /// </summary>
    /// <param name="operation">The name of the operation.</param>
    /// <param name="passed">The value indicating whether the health check is successful.</param>
    /// <param name="message">The message generated by the health check.</param>
    private HealthCheckResult(string operation, bool passed, string message)
    {
      this.operation = operation;
      this.passed = passed;
      this.message = message;
    }

    /// <summary>Creates a healthy check result.</summary>
    /// <param name="operation">The name of the operation.</param>
    /// <param name="message">The message of the result.</param>
    /// <returns>A healthy check result.</returns>
    public static HealthCheckResult Healthy(string operation, string message) => new HealthCheckResult(operation, true, message);

    /// <summary>Creates a unhealthy check result.</summary>
    /// <param name="operation">The name of the operation.</param>
    /// <param name="message">The message of the result.</param>
    /// <returns>A unhealthy check result.</returns>
    public static HealthCheckResult Unhealthy(string operation, string message) => new HealthCheckResult(operation, false, message);

    /// <summary>Gets or sets the operation name.</summary>
    public string Operation
    {
      get => this.operation;
      set => this.operation = value;
    }

    /// <summary>
    /// Gets or sets a value indicating whether operation is successful.
    /// </summary>
    public bool Passed
    {
      get => this.passed;
      set => this.passed = value;
    }

    /// <summary>Gets or sets the health check message.</summary>
    public string Message
    {
      get => this.message;
      set => this.message = value;
    }

    /// <summary>
    /// Gets or sets a value indicating whether the task is critical.
    /// </summary>
    [JsonIgnore]
    public bool Critical { get; set; }

    /// <summary>Gets or sets the health task last execution time.</summary>
    public DateTime LastExecutionTime { get; set; }

    /// <summary>Gets or sets the elapsed time in milliseconds.</summary>
    public double ElapsedMs { get; set; }

    /// <summary>Gets or sets the available groups.</summary>
    [JsonIgnore]
    public IEnumerable<string> Groups { get; set; }
  }
}
