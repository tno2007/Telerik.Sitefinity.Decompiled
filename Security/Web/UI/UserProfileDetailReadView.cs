// Decompiled with JetBrains decompiler
// Type: Telerik.Sitefinity.Security.Web.UI.UserProfileDetailReadView
// Assembly: Telerik.Sitefinity, Version=13.3.7600.0, Culture=neutral, PublicKeyToken=b28c218413bdf563
// MVID: 39C4B52A-B559-4D9C-97D9-CCCF73C3738E
// Assembly location: C:\Programs\Sitefinity\ProjectManager_13_3_7600\_EmptyProject\bin\Telerik.Sitefinity.dll

using System;
using System.Collections.Generic;
using System.Web.UI;
using System.Web.UI.WebControls;
using Telerik.Sitefinity.Modules.Pages;
using Telerik.Sitefinity.Modules.UserProfiles;
using Telerik.Sitefinity.Modules.UserProfiles.Web.UI;
using Telerik.Sitefinity.Web.UI;
using Telerik.Sitefinity.Web.UI.ContentUI.Contracts;

namespace Telerik.Sitefinity.Security.Web.UI
{
  /// <summary>
  /// Control used to display a single UserProfile in detail read mode.
  /// </summary>
  [ControlTemplateInfo("UserProfilesResources", "ProfileReadMode", "Users")]
  public class UserProfileDetailReadView : UserProfileDetailView
  {
    public const string layoutTemplateName = "Telerik.Sitefinity.Resources.Templates.Frontend.Security.UserProfileReadView.ascx";
    public const string autoGeneratedFieldsLayoutTemplateName = "Telerik.Sitefinity.Resources.Templates.Frontend.Security.UserProfileReadAutoGeneratedFieldsView.ascx";
    public const string autoGeneratedFieldsBackendLayoutTemplateName = "Telerik.Sitefinity.Resources.Templates.Backend.Security.UserProfileReadAutoGeneratedFieldsViewBackend.ascx";
    public const string noUserLayoutTemplateName = "Telerik.Sitefinity.Resources.Templates.Frontend.Security.UserProfileReadViewNoUser.ascx";
    public const string listLikeLayoutTemplateName = "Telerik.Sitefinity.Resources.Templates.Frontend.Security.UserProfileReadListLikeView.ascx";
    public static readonly string layoutTemplatePath = ControlUtilities.ToVppPath("Telerik.Sitefinity.Resources.Templates.Frontend.Security.UserProfileReadView.ascx");
    public static readonly string autoGeneratedFieldsLayoutTemplatePath = ControlUtilities.ToVppPath("Telerik.Sitefinity.Resources.Templates.Frontend.Security.UserProfileReadAutoGeneratedFieldsView.ascx");
    public static readonly string autoGeneratedFieldsBackendLayoutTemplatePath = ControlUtilities.ToVppPath("Telerik.Sitefinity.Resources.Templates.Backend.Security.UserProfileReadAutoGeneratedFieldsViewBackend.ascx");
    public static readonly string noUserLayoutTemplatePath = ControlUtilities.ToVppPath("Telerik.Sitefinity.Resources.Templates.Frontend.Security.UserProfileReadViewNoUser.ascx");
    public static readonly string listLikeLayoutTemplatePath = ControlUtilities.ToVppPath("Telerik.Sitefinity.Resources.Templates.Frontend.Security.UserProfileReadListLikeView.ascx");

    /// <summary>Gets the name of the embedded layout template.</summary>
    /// <value></value>
    /// <remarks>
    /// Override this property to change the embedded template to be used with the dialog
    /// </remarks>
    protected override string LayoutTemplateName => (string) null;

    /// <summary>
    /// Gets or sets the path of the external template to be used by the control.
    /// </summary>
    /// <value></value>
    public override string LayoutTemplatePath
    {
      get
      {
        if (this.IsUserAuthenticated())
        {
          string layoutTemplatePath = base.LayoutTemplatePath;
          return string.IsNullOrEmpty(layoutTemplatePath) ? this.DefaultLayoutTemplatePath : layoutTemplatePath;
        }
        return this.ProfileViewDefinition == null || string.IsNullOrEmpty(this.ProfileViewDefinition.NoUserTemplatePath) ? UserProfileDetailReadView.noUserLayoutTemplatePath : this.ProfileViewDefinition.NoUserTemplatePath;
      }
      set => base.LayoutTemplatePath = value;
    }

    protected override string DefaultLayoutTemplatePath => UserProfileDetailReadView.layoutTemplatePath;

    /// <summary>
    /// Gets the reference to the container of all field controls.
    /// </summary>
    protected new PlaceHolder ItemContainer => this.Container.GetControl<PlaceHolder>("itemContainer", true);

    /// <summary>
    /// Gets a dictionary of field controls and their ids as keys.
    /// </summary>
    protected new Dictionary<string, Control> FieldControls => this.Container.GetControls<Telerik.Sitefinity.Web.UI.Fields.Contracts.IFieldControl>();

    /// <summary>
    /// Gets the reference to the buttons that switches the view to edit mode or redirects the client to another page that should contain an edin control.
    /// </summary>
    protected HyperLink EditProfileLink => this.Container.GetControl<HyperLink>("editProfile", false);

    /// <summary>
    /// Gets the reference to the buttons that switches the view to change password mode or redirects the client to another page that should contain a change password control.
    /// </summary>
    protected HyperLink ChangePasswrodLink => this.Container.GetControl<HyperLink>("changePasswrod", false);

    protected HyperLink ChangeQuestionAndAnswer => this.Container.GetControl<HyperLink>("changeQuestionAndAnswer", false);

    /// <summary>
    /// Gets the reference to the control that displays profile fields according to a frontend detail view definition.
    /// </summary>
    protected new UserProfilesControl ProfileControl => this.Container.GetControl<UserProfilesControl>("profileDataControl", false);

    /// <summary>Initializes the controls.</summary>
    /// <param name="container">The controls container.</param>
    /// <param name="definition">The content view definition.</param>
    protected override void InitializeControls(
      GenericContainer container,
      IContentViewDefinition definition)
    {
      UserProfilesControl profileControl = this.ProfileControl;
      if (profileControl != null)
        profileControl.DisplayedProfileTypes = new List<string>()
        {
          this.ProfileViewDefinition.ProfileTypeFullName
        };
      this.BindUserProfile();
      this.ConfigureModeSwitchingButtons();
      base.InitializeControls(container, definition);
    }

    /// <summary>
    /// Gets the required by the control, core library scripts predefined in the <see cref="T:Telerik.Sitefinity.Modules.Pages.ScriptRef" /> enum.
    /// </summary>
    /// <example>
    /// // The defaults are:
    /// ScriptRef.MicrosoftAjax |
    /// ScriptRef.MicrosoftAjaxWebForms |
    /// ScriptRef.JQuery |
    /// ScriptRef.JQueryValidate |
    /// ScriptRef.JQueryCookie |
    /// ScriptRef.TelerikSitefinity |
    /// ScriptRef.QueryString;
    /// </example>
    /// <returns>A <see cref="T:Telerik.Sitefinity.Modules.Pages.ScriptRef" /> enum value indicating the mix of library scripts that the control requires.</returns>
    protected override ScriptRef GetRequiredCoreScripts() => ScriptRef.Empty;

    private void ConfigureModeSwitchingButtons()
    {
      bool flag1 = UserProfilesHelper.IsExternalUser(SecurityManager.GetCurrentUserId());
      if (this.ProfileViewDefinition.ShowAdditionalModesLinks.HasValue && this.ProfileViewDefinition.ShowAdditionalModesLinks.Value)
      {
        bool flag2 = !this.ProfileViewDefinition.OpenViewsInExternalPages.HasValue || !this.ProfileViewDefinition.OpenViewsInExternalPages.Value;
        if (this.EditProfileLink != null)
        {
          this.EditProfileLink.NavigateUrl = flag2 || !this.ProfileViewDefinition.EditProfilePageId.HasValue || this.ProfileViewDefinition.EditProfilePageId.Value == Guid.Empty ? this.Host.GetViewUrl(((UserProfileView) this.Host).WriteModeViewName) : this.GetPageUrl(this.ProfileViewDefinition.EditProfilePageId.Value);
          if (this.IsDesignMode())
            this.EditProfileLink.NavigateUrl = "javascript:void(0);";
        }
        if (this.ChangePasswrodLink != null)
        {
          if (flag1)
            this.ChangePasswrodLink.Visible = false;
          else
            this.ChangePasswrodLink.NavigateUrl = flag2 || !this.ProfileViewDefinition.ChangePasswordPageId.HasValue || this.ProfileViewDefinition.ChangePasswordPageId.Value == Guid.Empty ? this.Host.GetViewUrl(((UserProfileView) this.Host).ChangePasswordModeViewName) : this.GetPageUrl(this.ProfileViewDefinition.ChangePasswordPageId.Value);
          if (this.IsDesignMode())
            this.ChangePasswrodLink.NavigateUrl = "javascript:void(0);";
        }
        if (this.ChangeQuestionAndAnswer == null)
          return;
        if (UserManager.GetManager().Provider.RequiresQuestionAndAnswer && !flag1)
        {
          if (!flag2 && this.ProfileViewDefinition.ChangePasswordQuestionAndAnswerPageId.HasValue)
          {
            Guid? questionAndAnswerPageId = this.ProfileViewDefinition.ChangePasswordQuestionAndAnswerPageId;
            Guid empty = Guid.Empty;
            if ((questionAndAnswerPageId.HasValue ? (questionAndAnswerPageId.HasValue ? (questionAndAnswerPageId.GetValueOrDefault() == empty ? 1 : 0) : 1) : 0) == 0)
            {
              HyperLink questionAndAnswer = this.ChangeQuestionAndAnswer;
              questionAndAnswerPageId = this.ProfileViewDefinition.ChangePasswordQuestionAndAnswerPageId;
              string pageUrl = this.GetPageUrl(questionAndAnswerPageId.Value);
              questionAndAnswer.NavigateUrl = pageUrl;
              goto label_16;
            }
          }
          this.ChangeQuestionAndAnswer.NavigateUrl = this.Host.GetViewUrl(((UserProfileView) this.Host).ChangeQuestionAndAnswerModeViewName);
label_16:
          if (!this.IsDesignMode())
            return;
          this.ChangeQuestionAndAnswer.NavigateUrl = "javascript:void(0);";
        }
        else
          this.ChangeQuestionAndAnswer.Visible = false;
      }
      else
      {
        if (this.EditProfileLink != null)
          this.EditProfileLink.Visible = false;
        if (this.ChangePasswrodLink != null)
          this.ChangePasswrodLink.Visible = false;
        if (this.ChangeQuestionAndAnswer == null)
          return;
        this.ChangeQuestionAndAnswer.Visible = false;
      }
    }

    protected override HtmlTextWriterTag TagKey => HtmlTextWriterTag.Div;
  }
}
