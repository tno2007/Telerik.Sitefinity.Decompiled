// Decompiled with JetBrains decompiler
// Type: Telerik.Sitefinity.Security.Sanitizers.SvgSanitizer
// Assembly: Telerik.Sitefinity, Version=13.3.7600.0, Culture=neutral, PublicKeyToken=b28c218413bdf563
// MVID: 39C4B52A-B559-4D9C-97D9-CCCF73C3738E
// Assembly location: C:\Programs\Sitefinity\ProjectManager_13_3_7600\_EmptyProject\bin\Telerik.Sitefinity.dll

using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Xml;
using Telerik.Sitefinity.FileProcessors;
using Telerik.Sitefinity.Processors;

namespace Telerik.Sitefinity.Security.Sanitizers
{
  /// <summary>SVG file sanitizer</summary>
  public class SvgSanitizer : ProcessorBase, IFileProcessor, IProcessor
  {
    private const string ScriptRegex = "(?:\\w+script|data):";
    private const string AllowedMediaTypesKey = "dataMediaTypes";
    private static string[] allowedTags = new string[208]
    {
      "a",
      "abbr",
      "acronym",
      "address",
      "area",
      "article",
      "aside",
      "audio",
      "b",
      "bdi",
      "bdo",
      "big",
      "blink",
      "blockquote",
      "body",
      "br",
      "button",
      "canvas",
      "caption",
      "center",
      "cite",
      "code",
      "col",
      "colgroup",
      "content",
      "data",
      "datalist",
      "dd",
      "decorator",
      "del",
      "details",
      "dfn",
      "dir",
      "div",
      "dl",
      "dt",
      "element",
      "em",
      "fieldset",
      "figcaption",
      "figure",
      "font",
      "footer",
      "form",
      "h1",
      "h2",
      "h3",
      "h4",
      "h5",
      "h6",
      "head",
      "header",
      "hgroup",
      "hr",
      "html",
      "i",
      "img",
      "input",
      "ins",
      "kbd",
      "label",
      "legend",
      "li",
      "main",
      "map",
      "mark",
      "marquee",
      "menu",
      "menuitem",
      "meter",
      "nav",
      "nobr",
      "ol",
      "optgroup",
      "option",
      "output",
      "p",
      "pre",
      "progress",
      "q",
      "rp",
      "rt",
      "ruby",
      "s",
      "samp",
      "section",
      "select",
      "shadow",
      "small",
      "source",
      "spacer",
      "span",
      "strike",
      "strong",
      "style",
      "sub",
      "summary",
      "sup",
      "table",
      "tbody",
      "td",
      "template",
      "textarea",
      "tfoot",
      "th",
      "thead",
      "time",
      "tr",
      "track",
      "tt",
      "u",
      "ul",
      "var",
      "video",
      "wbr",
      "svg",
      "altglyph",
      "altglyphdef",
      "altglyphitem",
      "animate",
      "animatecolor",
      "animatemotion",
      "animatetransform",
      "circle",
      "clippath",
      "defs",
      "desc",
      "ellipse",
      "font",
      "g",
      "glyph",
      "glyphref",
      "hkern",
      "image",
      "line",
      "lineargradient",
      "marker",
      "mask",
      "metadata",
      "mpath",
      "path",
      "pattern",
      "polygon",
      "polyline",
      "radialgradient",
      "rect",
      "stop",
      "switch",
      "symbol",
      "text",
      "textpath",
      "title",
      "tref",
      "tspan",
      "view",
      "vkern",
      "use",
      "#cdata-section",
      "feblend",
      "fecolormatrix",
      "fecomponenttransfer",
      "fecomposite",
      "feconvolvematrix",
      "fediffuselighting",
      "fedisplacementmap",
      "feflood",
      "fefunca",
      "fefuncb",
      "fefuncg",
      "fefuncr",
      "fegaussianblur",
      "femerge",
      "femergenode",
      "femorphology",
      "feoffset",
      "fespecularlighting",
      "fetile",
      "feturbulence",
      "math",
      "menclose",
      "merror",
      "mfenced",
      "mfrac",
      "mglyph",
      "mi",
      "mlabeledtr",
      "mmuliscripts",
      "mn",
      "mo",
      "mover",
      "mpadded",
      "mphantom",
      "mroot",
      "mrow",
      "ms",
      "mpspace",
      "msqrt",
      "mystyle",
      "msub",
      "msup",
      "msubsup",
      "mtable",
      "mtd",
      "mtext",
      "mtr",
      "munder",
      "munderover",
      "#text"
    };
    private static string[] allowedAttributes = new string[305]
    {
      "accept",
      "action",
      "align",
      "alt",
      "autocomplete",
      "background",
      "bgcolor",
      "border",
      "cellpadding",
      "cellspacing",
      "checked",
      "cite",
      "class",
      "clear",
      "color",
      "cols",
      "colspan",
      "coords",
      "datetime",
      "default",
      "dir",
      "disabled",
      "download",
      "enable-background",
      "enctype",
      "face",
      "for",
      "headers",
      "height",
      "hidden",
      "high",
      "href",
      "hreflang",
      "id",
      "ismap",
      "label",
      "lang",
      "list",
      "loop",
      "low",
      "max",
      "maxlength",
      "media",
      "method",
      "min",
      "multiple",
      "name",
      "noshade",
      "novalidate",
      "nowrap",
      "open",
      "optimum",
      "pattern",
      "placeholder",
      "poster",
      "preload",
      "pubdate",
      "radiogroup",
      "readonly",
      "rel",
      "required",
      "rev",
      "reversed",
      "rows",
      "rowspan",
      "spellcheck",
      "scope",
      "selected",
      "shape",
      "size",
      "span",
      "srclang",
      "start",
      "src",
      "step",
      "style",
      "summary",
      "tabindex",
      "title",
      "type",
      "usemap",
      "valign",
      "value",
      "width",
      "xmlns",
      "allowreorder",
      "attributename",
      "attributetype",
      "autoreverse",
      "basefrequency",
      "baseprofile",
      "calcmode",
      "clippathunits",
      "contentscripttype",
      "contentstyletype",
      "diffuseconstant",
      "edgemode",
      "externalresourcesrequired",
      "filterres",
      "filterunits",
      "glyphref",
      "gradienttransform",
      "gradientunits",
      "kernelmatrix",
      "kernelunitlength",
      "keypoints",
      "keysplines",
      "keytimes",
      "lengthadjust",
      "limitingconeangle",
      "markerheight",
      "markerunits",
      "markerwidth",
      "maskcontentunits",
      "maskunits",
      "numoctaves",
      "pathlength",
      "patterncontentunits",
      "patterntransform",
      "patternunits",
      "pointsatx",
      "pointsaty",
      "pointsatz",
      "preservealpha",
      "preserveaspectratio",
      "primitiveunits",
      "refx",
      "refy",
      "repeatcount",
      "repeatdur",
      "requiredextensions",
      "requiredfeatures",
      "specularconstant",
      "specularexponent",
      "spreadmethod",
      "startoffset",
      "stddeviation",
      "stitchtiles",
      "surfacescale",
      "systemlanguage",
      "tablevalues",
      "targetx",
      "targety",
      "textlength",
      "viewbox",
      "viewtarget",
      "xchannelselector",
      "ychannelselector",
      "zoomandpan",
      "accent-height",
      "accumulate",
      "additivive",
      "alignment-baseline",
      "ascent",
      "azimuth",
      "baseline-shift",
      "bias",
      "clip",
      "clip-path",
      "clip-rule",
      "color",
      "color-interpolation",
      "color-interpolation-filters",
      "color-profile",
      "color-rendering",
      "cx",
      "cy",
      "d",
      "dy",
      "dy",
      "direction",
      "display",
      "divisor",
      "dur",
      "elevation",
      "end",
      "fill",
      "fill-opacity",
      "fill-rule",
      "filter",
      "flood-color",
      "flood-opacity",
      "font-family",
      "font-size",
      "font-size-adjust",
      "font-stretch",
      "font-style",
      "font-variant",
      "font-weight",
      "from",
      "image-rendering",
      "in",
      "in2",
      "k1",
      "k2",
      "k3",
      "k4",
      "kerning",
      "letter-spacing",
      "lighting-color",
      "local",
      "marker-end",
      "marker-mid",
      "marker-start",
      "max",
      "mask",
      "mode",
      "min",
      "offset",
      "operator",
      "opacity",
      "order",
      "orient",
      "overflow",
      "paint-order",
      "path",
      "points",
      "r",
      "rx",
      "ry",
      "radius",
      "restart",
      "scale",
      "seed",
      "shape-rendering",
      "stop-color",
      "stop-opacity",
      "stroke-dasharray",
      "stroke-dashoffset",
      "stroke-linecap",
      "stroke-linejoin",
      "stroke-miterlimit",
      "stroke-opacity",
      "stroke",
      "stroke-width",
      "transform",
      "text-anchor",
      "text-decoration",
      "text-rendering",
      "to",
      "u1",
      "u2",
      "viewbox",
      "visibility",
      "version",
      "word-spacing",
      "wrap",
      "writing-mode",
      "x",
      "x1",
      "x2",
      "y",
      "y1",
      "y2",
      "z",
      "accent",
      "accentunder",
      "bevelled",
      "close",
      "columnsalign",
      "columnlines",
      "columnspan",
      "denomalign",
      "depth",
      "display",
      "displaystyle",
      "fence",
      "frame",
      "largeop",
      "length",
      "linethickness",
      "lspace",
      "lquote",
      "mathbackground",
      "mathcolor",
      "mathsize",
      "mathvariant",
      "maxsize",
      "minsize",
      "movablelimits",
      "notation",
      "numalign",
      "open",
      "rowalign",
      "rowlines",
      "rowspacing",
      "rowspan",
      "rspace",
      "rquote",
      "scriptlevel",
      "scriptminsize",
      "scriptsizemultiplier",
      "selection",
      "separator",
      "separators",
      "stretchy",
      "subscriptshift",
      "supscriptshift",
      "symmetric",
      "voffset",
      "xlink:href",
      "xmlns:xlink",
      "xlink:title",
      "xml:id",
      "xml:space"
    };
    private readonly string[] targetedMimeTypes = new string[1]
    {
      "image/svg+xml"
    };
    private string[] allowedMediaTypes = new string[0];

    /// <inheritdoc />
    protected override void Initialize(NameValueCollection config)
    {
      if (config == null || !((IEnumerable<string>) config.AllKeys).Contains<string>("dataMediaTypes"))
        return;
      this.allowedMediaTypes = config["dataMediaTypes"].Split(',');
    }

    /// <inheritdoc />
    public bool CanProcessFile(FileProcessorInput fileInput) => !string.IsNullOrEmpty(fileInput.MimeType) && ((IEnumerable<string>) this.targetedMimeTypes).Contains<string>(fileInput.MimeType.ToLower());

    /// <inheritdoc />
    [SuppressMessage("Microsoft.Reliability", "CA2000:Dispose objects before losing scope", Justification = "The stream should not be disposed because it is being returned.")]
    public Stream Process(FileProcessorInput fileInput)
    {
      MemoryStream memoryStream = (MemoryStream) null;
      if (fileInput != null && fileInput.FileStream != null && fileInput.FileStream.CanRead && fileInput.FileStream.CanSeek)
      {
        fileInput.FileStream.Position = 0L;
        string xml = (string) null;
        using (StreamReader streamReader = new StreamReader(fileInput.FileStream))
          xml = streamReader.ReadToEnd();
        XmlDocument xmlDocument = new XmlDocument();
        xmlDocument.XmlResolver = (XmlResolver) null;
        xmlDocument.LoadXml(xml);
        if (this.Sanitize((XmlNode) xmlDocument.DocumentElement))
        {
          using (StringWriter output = new StringWriter())
          {
            using (XmlWriter w = XmlWriter.Create((TextWriter) output, new XmlWriterSettings()
            {
              NewLineHandling = NewLineHandling.None,
              NamespaceHandling = NamespaceHandling.OmitDuplicates,
              Indent = true
            }))
              xmlDocument.WriteTo(w);
            string str = output.ToString();
            if (!string.IsNullOrEmpty(str))
            {
              memoryStream = new MemoryStream();
              StreamWriter streamWriter = new StreamWriter((Stream) memoryStream);
              streamWriter.Write(str);
              streamWriter.Flush();
              memoryStream.Position = 0L;
            }
          }
        }
      }
      return (Stream) memoryStream;
    }

    /// <summary>Sanitize XmlNode</summary>
    /// <param name="rootNode">Xml node that is sanitized</param>
    /// <returns>
    ///   <c>true</c> if the input node is valid and sanitized; otherwise, <c>false</c>.
    /// </returns>
    protected virtual bool Sanitize(XmlNode rootNode)
    {
      string lower1 = rootNode.Name.ToLower();
      if (!((IEnumerable<string>) SvgSanitizer.allowedTags).Contains<string>(lower1.Substring(lower1.LastIndexOf(":") + 1)))
        return false;
      if (rootNode.Attributes != null)
      {
        for (int i = rootNode.Attributes.Count - 1; i >= 0; --i)
        {
          XmlAttribute attribute = rootNode.Attributes[i];
          string lower2 = attribute.Name.ToLower();
          if (!((IEnumerable<string>) SvgSanitizer.allowedAttributes).Contains<string>(lower2) && !lower2.StartsWith("xmlns:"))
            rootNode.Attributes.Remove(attribute);
          else if (lower2.Substring(lower2.LastIndexOf(":") + 1) == "href" && new Regex("(?:\\w+script|data):", RegexOptions.IgnoreCase).IsMatch(attribute.Value))
          {
            int num = attribute.Value.IndexOf(';');
            if (num < 0)
              num = attribute.Value.IndexOf(',');
            int startIndex = attribute.Value.IndexOf(':') + 1;
            if (!((IEnumerable<string>) this.allowedMediaTypes).Contains<string>(attribute.Value.Substring(startIndex, num - startIndex)))
              rootNode.Attributes.Remove(attribute);
          }
        }
      }
      for (int i = rootNode.ChildNodes.Count - 1; i >= 0; --i)
      {
        XmlNode childNode = rootNode.ChildNodes[i];
        if (!this.Sanitize(childNode))
          rootNode.RemoveChild(childNode);
      }
      return true;
    }
  }
}
