// Decompiled with JetBrains decompiler
// Type: Telerik.Sitefinity.Security.Web.UI.UserProfileDetailWriteView
// Assembly: Telerik.Sitefinity, Version=13.3.7600.0, Culture=neutral, PublicKeyToken=b28c218413bdf563
// MVID: 39C4B52A-B559-4D9C-97D9-CCCF73C3738E
// Assembly location: C:\Programs\Sitefinity\ProjectManager_13_3_7600\_EmptyProject\bin\Telerik.Sitefinity.dll

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net.Mail;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using Telerik.Sitefinity.Data;
using Telerik.Sitefinity.Localization;
using Telerik.Sitefinity.Model;
using Telerik.Sitefinity.Modules.GenericContent;
using Telerik.Sitefinity.Modules.Newsletters;
using Telerik.Sitefinity.Modules.Pages;
using Telerik.Sitefinity.Modules.UserProfiles;
using Telerik.Sitefinity.Modules.UserProfiles.Web.UI;
using Telerik.Sitefinity.Security.Claims;
using Telerik.Sitefinity.Security.Model;
using Telerik.Sitefinity.Services;
using Telerik.Sitefinity.Web.UI;
using Telerik.Sitefinity.Web.UI.ContentUI.Contracts;
using Telerik.Sitefinity.Web.UI.Fields;
using Telerik.Sitefinity.Web.UI.Fields.Enums;

namespace Telerik.Sitefinity.Security.Web.UI
{
  /// <summary>
  /// Control used to display a single UserProfile in detail write mode.
  /// </summary>
  [ControlTemplateInfo("UserProfilesResources", "ProfileEditMode", "Users")]
  public class UserProfileDetailWriteView : UserProfileDetailView
  {
    private UserProfileManager userProfileManager;
    public const string layoutTemplateName = "Telerik.Sitefinity.Resources.Templates.Frontend.Security.UserProfileWriteView.ascx";
    public const string autoGeneratedFieldsLayoutTemplateName = "Telerik.Sitefinity.Resources.Templates.Frontend.Security.UserProfileWriteAutoGeneratedFieldsView.ascx";
    public const string autoGeneratedFieldsBackendLayoutTemplateName = "Telerik.Sitefinity.Resources.Templates.Backend.Security.UserProfileWriteAutoGeneratedFieldsViewBackend.ascx";
    public const string noUserLayoutTemplateName = "Telerik.Sitefinity.Resources.Templates.Frontend.Security.UserProfileReadViewNoUser.ascx";
    private const string userProfileDetailWriteViewScript = "Telerik.Sitefinity.Security.Web.UI.Scripts.UserProfileDetailWriteView.js";
    public static readonly string layoutTemplatePath = ControlUtilities.ToVppPath("Telerik.Sitefinity.Resources.Templates.Frontend.Security.UserProfileWriteView.ascx");
    public static readonly string autoGeneratedFieldsLayoutTemplatePath = ControlUtilities.ToVppPath("Telerik.Sitefinity.Resources.Templates.Frontend.Security.UserProfileWriteAutoGeneratedFieldsView.ascx");
    public static readonly string autoGeneratedFieldsBackendLayoutTemplatePath = ControlUtilities.ToVppPath("Telerik.Sitefinity.Resources.Templates.Backend.Security.UserProfileWriteAutoGeneratedFieldsViewBackend.ascx");
    public static readonly string noUserLayoutTemplatePath = ControlUtilities.ToVppPath("Telerik.Sitefinity.Resources.Templates.Frontend.Security.UserProfileReadViewNoUser.ascx");

    /// <summary>Gets the name of the embedded layout template.</summary>
    /// <value></value>
    /// <remarks>
    /// Override this property to change the embedded template to be used with the dialog
    /// </remarks>
    protected override string LayoutTemplateName => (string) null;

    /// <summary>
    /// Gets or sets the path of the external template to be used by the control.
    /// </summary>
    /// <value></value>
    public override string LayoutTemplatePath
    {
      get
      {
        if (this.IsUserAuthenticated())
        {
          string layoutTemplatePath = base.LayoutTemplatePath;
          return string.IsNullOrEmpty(layoutTemplatePath) ? this.DefaultLayoutTemplatePath : layoutTemplatePath;
        }
        return this.ProfileViewDefinition == null || string.IsNullOrEmpty(this.ProfileViewDefinition.NoUserTemplatePath) ? UserProfileDetailWriteView.noUserLayoutTemplatePath : this.ProfileViewDefinition.NoUserTemplatePath;
      }
      set => base.LayoutTemplatePath = value;
    }

    protected override string DefaultLayoutTemplatePath => UserProfileDetailWriteView.layoutTemplatePath;

    /// <summary>Gets the user profile manager.</summary>
    protected virtual UserProfileManager UserProfileManager
    {
      get
      {
        if (this.userProfileManager == null)
        {
          IContentManager contentManager = this.Host.ResolveContentManager();
          this.userProfileManager = contentManager != null && contentManager is UserProfileManager ? contentManager as UserProfileManager : throw new NotSupportedException("The UserProfileDetailWriteView requires a UserProfileManager to be configured");
        }
        return this.userProfileManager;
      }
    }

    /// <summary>
    /// Gets the reference to the container of all field controls.
    /// </summary>
    protected Control ItemContainer => this.Container.GetControl<Control>("itemContainer", true);

    /// <summary>
    /// Gets the reference to the buttons that saves the changes made to the current profile.
    /// </summary>
    protected IButtonControl SaveChanges => this.Container.GetControl<IButtonControl>("saveChanges", false);

    /// <summary>
    /// Gets a dictionary of field controls and their ids as keys.
    /// </summary>
    protected new Dictionary<string, Control> FieldControls => this.Container.GetControls<Telerik.Sitefinity.Web.UI.Fields.Contracts.IFieldControl>();

    /// <summary>
    /// Gets the reference to the buttons that cancels the password changing.
    /// </summary>
    protected HyperLink CancelLink => this.Container.GetControl<HyperLink>("cancel", false);

    /// <summary>
    /// Gets the reference to the control that displays profile fields according to a frontend detail view definition.
    /// </summary>
    protected new UserProfilesControl ProfileControl => this.Container.GetControl<UserProfilesControl>("profileDataControl", false);

    /// <summary>Gets the form wrapper.</summary>
    /// <value>The form wrapper.</value>
    protected HtmlGenericControl FormWrapper => this.Container.GetControl<HtmlGenericControl>("formWrapper", false);

    /// <summary>Gets the Require password panel.</summary>
    /// <value>The require password panel.</value>
    protected Control PasswordRequirePanel => this.Container.GetControl<Control>("passwordRequirePanel", false);

    /// <summary>Gets the Require password field.</summary>
    /// <value>The require password field.</value>
    protected TextField PasswordRequireField => this.Container.GetControl<TextField>("passwordRequireField", false);

    /// <summary>Gets the success message label.</summary>
    /// <value>The success message label.</value>
    protected Label SuccessMessageLabel => this.Container.GetControl<Label>("successMessageLabel", false);

    /// <summary>
    /// Gets the reference to the control displaying the error message.
    /// </summary>
    protected ITextControl ErrorLabel => this.Container.GetControl<ITextControl>("errorLabel", true);

    /// <summary>Gets the external user message label.</summary>
    /// <value>The success message label.</value>
    protected Label ExternalUserMessageLabel => this.Container.GetControl<Label>("externalUserMessageLabel", false);

    /// <summary>Initializes the controls.</summary>
    /// <param name="container">The controls container.</param>
    /// <param name="definition">The content view definition.</param>
    protected override void InitializeControls(
      GenericContainer container,
      IContentViewDefinition definition)
    {
      UserProfilesControl profileControl = this.ProfileControl;
      if (profileControl != null)
        profileControl.DisplayedProfileTypes = new List<string>()
        {
          this.ProfileViewDefinition.ProfileTypeFullName
        };
      this.ConfigureSaveButton();
      this.ConfigureCancelButton();
      this.BindUserProfile();
      this.ConfigureExternalUserMessage(true);
      base.InitializeControls(container, definition);
    }

    /// <inheritdoc />
    public override IEnumerable<ScriptDescriptor> GetScriptDescriptors()
    {
      List<ScriptDescriptor> scriptDescriptors = new List<ScriptDescriptor>();
      ScriptControlDescriptor controlDescriptor = new ScriptControlDescriptor(this.GetType().FullName, this.ClientID);
      if (this.Host.DetailItem is UserProfile detailItem)
      {
        controlDescriptor.AddProperty("_originalEmail", (object) detailItem.User.Email);
        controlDescriptor.AddProperty("_isExternalUser", (object) (detailItem.User.ExternalProviderName != null));
      }
      if (this.SaveChanges != null)
        controlDescriptor.AddElementProperty("saveChangesControl", ((Control) this.SaveChanges).ClientID);
      if (this.PasswordRequirePanel != null)
        controlDescriptor.AddElementProperty("passwordRequirePanel", this.PasswordRequirePanel.ClientID);
      scriptDescriptors.Add((ScriptDescriptor) controlDescriptor);
      return (IEnumerable<ScriptDescriptor>) scriptDescriptors;
    }

    /// <inheritdoc />
    public override IEnumerable<ScriptReference> GetScriptReferences()
    {
      string fullName = typeof (UserProfileDetailWriteView).Assembly.FullName;
      return (IEnumerable<ScriptReference>) new List<ScriptReference>(base.GetScriptReferences())
      {
        new ScriptReference("Telerik.Sitefinity.Security.Web.UI.Scripts.UserProfileDetailWriteView.js", fullName)
      };
    }

    protected override HtmlTextWriterTag TagKey => HtmlTextWriterTag.Div;

    /// <summary>
    /// Gets the required by the control, core library scripts predefined in the <see cref="T:Telerik.Sitefinity.Modules.Pages.ScriptRef" /> enum.
    /// </summary>
    /// <example>
    /// // The defaults are:
    /// ScriptRef.MicrosoftAjax |
    /// ScriptRef.MicrosoftAjaxWebForms |
    /// ScriptRef.JQuery |
    /// ScriptRef.JQueryValidate |
    /// ScriptRef.JQueryCookie |
    /// ScriptRef.TelerikSitefinity |
    /// ScriptRef.QueryString;
    /// </example>
    /// <returns>A <see cref="T:Telerik.Sitefinity.Modules.Pages.ScriptRef" /> enum value indicating the mix of library scripts that the control requires.</returns>
    protected override ScriptRef GetRequiredCoreScripts() => ScriptRef.JQuery;

    /// <summary>Handles the Click event of the SaveChanges control.</summary>
    /// <param name="sender">The source of the event.</param>
    /// <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    protected virtual void SaveChanges_Click(object sender, EventArgs e)
    {
      bool flag = false;
      UserProfile detailItem = this.Host.DetailItem as UserProfile;
      string transactionName = Guid.NewGuid().ToString();
      UserManager manager = UserManager.GetManager(detailItem.User.ProviderName, transactionName);
      if (this.IsUserAuthenticated() && ((UserProfileView) this.Host).AllowCurrentProfileUpdates)
      {
        using (new ElevatedModeRegion((IManager) manager))
          flag = this.ProcessUserProfile(manager, detailItem, transactionName);
      }
      else
        flag = this.ProcessUserProfile(manager, detailItem, transactionName);
      if (!flag)
        return;
      this.ExecuteUserProfileSuccessfullUpdateActions();
    }

    private bool ProcessUserProfile(
      UserManager userManager,
      UserProfile detailItem,
      string transactionName)
    {
      User user = userManager.GetUser(detailItem.User.Id);
      List<string> errorMessages;
      if (!this.ValidateInput(userManager, detailItem.User.Id, user.Email, out errorMessages))
      {
        this.ShowErrorLabelMessages((IEnumerable<string>) errorMessages);
        return false;
      }
      this.CreateOrUpdateProfile(user, transactionName);
      try
      {
        TransactionManager.CommitTransaction(transactionName);
      }
      catch (ModelValidationException ex)
      {
        this.ShowErrorLabelMessages((IEnumerable<string>) new List<string>()
        {
          ex.GetMessage()
        });
        return false;
      }
      catch (Exception ex)
      {
        this.ShowErrorLabelMessages((IEnumerable<string>) new List<string>()
        {
          ex.Message
        });
        return false;
      }
      return true;
    }

    private bool ValidateInput(
      UserManager userManager,
      Guid userId,
      string originalEmail,
      out List<string> errorMessages)
    {
      errorMessages = new List<string>();
      foreach (KeyValuePair<string, Control> fieldControl1 in this.FieldControls)
      {
        bool flag1 = true;
        FieldControl fieldControl2 = fieldControl1.Value as FieldControl;
        if (!string.IsNullOrEmpty(fieldControl2.DataFieldName))
          flag1 = fieldControl2.IsValid();
        if (!flag1)
          errorMessages.Add(fieldControl2.Validator.ErrorMessage.IsNullOrEmpty() ? Res.Get<UserProfilesResources>().UnhandledProfileError : fieldControl2.Validator.ErrorMessage);
        if (fieldControl2.DataFieldName == "sf_Email" && fieldControl2.DisplayMode != FieldDisplayMode.Read)
        {
          string str = fieldControl2.Value.ToString();
          if (originalEmail != str)
          {
            string password = (string) null;
            TextField passwordRequireField = this.PasswordRequireField;
            if (passwordRequireField != null)
              password = passwordRequireField.Value.ToString();
            bool flag2 = !str.IsNullOrEmpty();
            if (!flag2)
            {
              errorMessages.Add(Res.Get<NewslettersResources>().EmailIsRequired);
            }
            else
            {
              try
              {
                MailAddress mailAddress = new MailAddress(str);
              }
              catch (FormatException ex)
              {
                flag2 = false;
              }
              if (!flag2)
                errorMessages.Add(Res.Get<ErrorMessages>().EmailAddressViolationMessage);
              else if (!userManager.RequiresUniqueEmail || userManager.EmailExists(str))
                errorMessages.Add(Res.Get<SecurityResources>().DuplicateEmail);
              else if (!userManager.ValidateUser(userId, password))
                errorMessages.Add(Res.Get<SecurityResources>().InvalidPassword);
            }
          }
        }
      }
      return !errorMessages.Any<string>();
    }

    /// <summary>Creates the or update profile.</summary>
    /// <returns></returns>
    protected virtual UserProfile CreateOrUpdateProfile(
      User user,
      string transactionName = null)
    {
      UserProfile detailItem = this.Host.DetailItem as UserProfile;
      UserProfileManager userProfileManager = this.Host.ResolveContentManager(transactionName) as UserProfileManager;
      UserProfile dataItem = userProfileManager.GetUserProfile(user.Id, this.ProfileViewDefinition.ProfileTypeFullName) ?? userProfileManager.CreateProfile(user, this.ProfileViewDefinition.ProfileTypeFullName);
      foreach (Telerik.Sitefinity.Web.UI.Fields.Contracts.IFieldControl fieldControl in this.FieldControlsToBind)
      {
        if (!string.IsNullOrEmpty(fieldControl.DataFieldName))
        {
          if (dataItem.DoesFieldExist(fieldControl.DataFieldName))
            dataItem.SetValue(fieldControl.DataFieldName, fieldControl.Value);
          else if (fieldControl.DataFieldName == "sf_Email")
            user.Email = fieldControl.Value.ToString();
        }
      }
      userProfileManager.RecompileItemUrls<UserProfile>(dataItem);
      return dataItem;
    }

    /// <summary>Creates the or update profile.</summary>
    /// <returns></returns>
    [Obsolete("Use CreateOrUpdateProfile with user and a transaction as a parameter.")]
    protected virtual UserProfile CreateOrUpdateProfile()
    {
      UserProfile dataItem = (UserProfile) this.Host.DetailItem ?? this.CreateProfileForTheCurrentUser();
      foreach (Telerik.Sitefinity.Web.UI.Fields.Contracts.IFieldControl fieldControl in this.FieldControlsToBind)
      {
        if (!string.IsNullOrEmpty(fieldControl.DataFieldName))
          dataItem.SetValue(fieldControl.DataFieldName, fieldControl.Value);
      }
      return dataItem;
    }

    /// <summary>Creates the profile for the current user.</summary>
    /// <returns></returns>
    [Obsolete("Not used anymore. Use CreateOrUpdateProfile with user and a transaction as a parameter.")]
    protected virtual UserProfile CreateProfileForTheCurrentUser()
    {
      UserManager.GetManager(this.ProfileViewDefinition.Provider);
      SitefinityIdentity currentIdentity = ClaimsManager.GetCurrentIdentity();
      Guid id = currentIdentity != null ? currentIdentity.UserId : throw new InvalidOperationException("current principal is null");
      return this.UserProfileManager.CreateProfile(UserManager.GetManager(currentIdentity.MembershipProvider).GetUser(id), this.ProfileViewDefinition.ProfileTypeFullName);
    }

    /// <summary>Configures the save button.</summary>
    protected virtual void ConfigureSaveButton()
    {
      if (this.SaveChanges == null)
        return;
      this.SaveChanges.Click += new EventHandler(this.SaveChanges_Click);
    }

    /// <summary>Configures the cancel button.</summary>
    protected virtual void ConfigureCancelButton()
    {
      if (this.CancelLink == null)
        return;
      this.CancelLink.NavigateUrl = this.Host.GetViewUrl((string) null);
    }

    /// <summary>Executes the user profile successful update actions.</summary>
    protected virtual void ExecuteUserProfileSuccessfullUpdateActions()
    {
      if (!this.ProfileViewDefinition.SubmittingUserProfileSuccessAction.HasValue)
        return;
      switch (this.ProfileViewDefinition.SubmittingUserProfileSuccessAction.Value)
      {
        case SubmittingSuccessAction.ShowMessage:
          this.ShowSubmissionSuccessMessage();
          break;
        case SubmittingSuccessAction.RedirectToPage:
          this.RedirectToSubmissionSuccessPage();
          break;
        case SubmittingSuccessAction.SwitchToReadMode:
          this.SwitchToReadMode();
          break;
      }
    }

    /// <summary>Shows the submission success message.</summary>
    protected virtual void ShowSubmissionSuccessMessage()
    {
      if (this.SuccessMessageLabel == null || this.ProfileViewDefinition.SubmitSuccessMessage.IsNullOrEmpty())
        return;
      this.SuccessMessageLabel.Text = this.ProfileViewDefinition.SubmitSuccessMessage;
      this.SuccessMessageLabel.Visible = true;
      if (this.FormWrapper == null)
        return;
      this.FormWrapper.Visible = false;
      this.ConfigureExternalUserMessage(false);
    }

    /// <summary>Redirects to submission success page.</summary>
    protected virtual void RedirectToSubmissionSuccessPage()
    {
      if (!this.ProfileViewDefinition.RedirectOnSubmitPageId.HasValue || !(this.ProfileViewDefinition.RedirectOnSubmitPageId.Value != Guid.Empty))
        return;
      string pageUrl = this.GetPageUrl(this.ProfileViewDefinition.RedirectOnSubmitPageId.Value);
      if (pageUrl.IsNullOrEmpty())
        return;
      SystemManager.CurrentHttpContext.Response.Redirect(pageUrl, true);
    }

    /// <summary>Switches to read mode.</summary>
    protected virtual void SwitchToReadMode() => SystemManager.CurrentHttpContext.Response.Redirect(this.Host.GetViewUrl(((UserProfileView) this.Host).ReadModeViewName), true);

    /// <summary>Shows the error label message and set message</summary>
    /// <param name="messages">List of messages to show.</param>
    protected virtual void ShowErrorLabelMessages(IEnumerable<string> messages)
    {
      this.ErrorLabel.Text = string.Join("<br />", messages);
      ((Control) this.ErrorLabel).Visible = true;
    }

    protected void ConfigureExternalUserMessage(bool visible)
    {
      UserProfile detailItem = (UserProfile) this.Host.DetailItem;
      if (!this.hasReadOnlyField || detailItem.User.ExternalProviderName.IsNullOrEmpty() || this.ExternalUserMessageLabel == null)
        return;
      this.ExternalUserMessageLabel.Text = string.Format((IFormatProvider) CultureInfo.InvariantCulture, Res.Get<Labels>().YouAreRegisteredWith, (object) detailItem.User.ExternalProviderName);
      this.ExternalUserMessageLabel.Visible = visible;
    }
  }
}
