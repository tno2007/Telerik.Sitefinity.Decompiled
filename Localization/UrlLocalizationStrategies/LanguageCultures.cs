// Decompiled with JetBrains decompiler
// Type: Telerik.Sitefinity.Localization.UrlLocalizationStrategies.LanguageCultures
// Assembly: Telerik.Sitefinity, Version=13.3.7600.0, Culture=neutral, PublicKeyToken=b28c218413bdf563
// MVID: 39C4B52A-B559-4D9C-97D9-CCCF73C3738E
// Assembly location: C:\Programs\Sitefinity\ProjectManager_13_3_7600\_EmptyProject\bin\Telerik.Sitefinity.dll

using System;
using System.Globalization;
using Telerik.Sitefinity.Localization.Configuration;

namespace Telerik.Sitefinity.Localization.UrlLocalizationStrategies
{
  /// <summary>
  /// Helper class to store the cultures for a specified culture element / system language
  /// </summary>
  public class LanguageCultures : ILanguageCultures
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="T:Telerik.Sitefinity.Localization.UrlLocalizationStrategies.LanguageCultures" /> class.
    /// </summary>
    /// <param name="culture">The culture.</param>
    public LanguageCultures(CultureElement culture)
    {
      this.Culture = CultureInfo.GetCultureInfo(culture.Culture);
      this.UICulture = CultureInfo.GetCultureInfo(culture.UICulture);
      this.Key = culture.Key;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="T:Telerik.Sitefinity.Localization.UrlLocalizationStrategies.LanguageCultures" /> class.
    /// </summary>
    /// <param name="culture">The culture.</param>
    /// <param name="uiCulture">The UI culture.</param>
    public LanguageCultures(string culture, string uiCulture)
      : this(CultureInfo.GetCultureInfo(culture), CultureInfo.GetCultureInfo(uiCulture))
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="T:Telerik.Sitefinity.Localization.UrlLocalizationStrategies.LanguageCultures" /> class.
    /// </summary>
    /// <param name="culture">The culture.</param>
    /// <param name="uiCulture">The UI culture.</param>
    public LanguageCultures(CultureInfo culture, CultureInfo uiCulture = null)
    {
      if (culture == null)
        throw new ArgumentNullException(nameof (culture));
      if (uiCulture == null)
        uiCulture = culture;
      this.Culture = culture;
      this.UICulture = uiCulture;
      this.Key = CulturesConfig.GenerateCultureKey(this.Culture, this.UICulture);
    }

    /// <summary>
    /// Gets or sets the key generated by CulturesConfig.GenerateCultureKey() function.
    /// </summary>
    /// <value>The key.</value>
    public string Key { get; set; }

    /// <summary>Gets or sets the culture.</summary>
    /// <value>The culture.</value>
    public CultureInfo Culture { get; set; }

    /// <summary>Gets or sets the UI culture.</summary>
    /// <value>The UI culture.</value>
    public CultureInfo UICulture { get; set; }
  }
}
